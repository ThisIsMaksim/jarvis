import { BotContext } from '../bot.js';
import { createChildLogger } from '../../config/logger.js';
import { Chat } from '../../db/models/Chat.js';
import { Topic } from '../../db/models/Topic.js';
import { Message } from '../../db/models/Message.js';
import { llmRouter } from '../../index.js';

const logger = createChildLogger('text-handler');

export async function handleText(ctx: BotContext) {
  const chatType = ctx.chat?.type;
  const text = ctx.message?.text;
  
  if (!text) return;
  
  logger.info(`Processing text message: "${text.substring(0, 50)}..."`);
  
  // Handle private chat
  if (chatType === 'private') {
    await handlePrivateMessage(ctx, text);
    return;
  }
  
  // Handle group chat
  if (chatType === 'group' || chatType === 'supergroup') {
    await handleGroupMessage(ctx, text);
    return;
  }
}

async function handlePrivateMessage(ctx: BotContext, _text: string) {
  // In private chat, always suggest adding to group
  await ctx.reply(
    'üí° **–î–æ–±–∞–≤—å—Ç–µ –º–µ–Ω—è –≤ –≥—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç —Å —Ç–æ–ø–∏–∫–∞–º–∏**\n\n' +
    '–Ø —Ä–∞–±–æ—Ç–∞—é –ª—É—á—à–µ –≤—Å–µ–≥–æ –≤ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–∞—Ö —Å –≤–∫–ª—é—á—ë–Ω–Ω—ã–º–∏ Topics (Forum), ' +
    '–≥–¥–µ –∫–∞–∂–¥—ã–π —Ç–æ–ø–∏–∫ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω—ã–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –∑–∞–¥–∞—á.\n\n' +
    '**–ö–∞–∫ –Ω–∞—á–∞—Ç—å:**\n' +
    '1. –î–æ–±–∞–≤—å—Ç–µ –º–µ–Ω—è –≤ –≥—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç\n' +
    '2. –í–∫–ª—é—á–∏—Ç–µ Topics –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö —á–∞—Ç–∞\n' +
    '3. –°–æ–∑–¥–∞–π—Ç–µ —Ç–æ–ø–∏–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ü–µ–ª–µ–π\n' +
    '4. –ù–∞—á–Ω–∏—Ç–µ –æ–±—â–µ–Ω–∏–µ!',
    {
      parse_mode: 'Markdown',
      reply_markup: {
        inline_keyboard: [[
          {
            text: '‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤ –≥—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç',
            url: `https://t.me/${ctx.me.username}?startgroup=true`
          }
        ]]
      }
    }
  );
}

async function handleGroupMessage(ctx: BotContext, text: string) {
  const chat = await Chat.findOne({ telegramId: ctx.chat!.id });
  
  // Check if topics are enabled
  if (!chat?.isForumEnabled || !chat?.hasTopicsEnabled) {
    // Check if we already sent a warning today
    const lastCheck = chat?.lastTopicsCheckAt;
    const now = new Date();
    const oneDayAgo = new Date(now.getTime() - 24 * 60 * 60 * 1000);
    
    if (!lastCheck || lastCheck < oneDayAgo) {
      await ctx.reply(
        '‚ö†Ô∏è **–î–ª—è –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç—ã –≤–∫–ª—é—á–∏—Ç–µ Topics (Forum)**\n\n' +
        '**–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:**\n' +
        '1. –û—Ç–∫—Ä–æ–π—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Ç–∞\n' +
        '2. –ù–∞–π–¥–∏—Ç–µ —Ä–∞–∑–¥–µ–ª "Topics" –∏–ª–∏ "–¢–µ–º—ã"\n' +
        '3. –í–∫–ª—é—á–∏—Ç–µ "Enable Topics"\n' +
        '4. –î–∞–π—Ç–µ –±–æ—Ç—É –ø—Ä–∞–≤–∞ –Ω–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–ø–∏–∫–∞–º–∏\n\n' +
        '–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ —Å–æ–∑–¥–∞–π—Ç–µ —Ç–æ–ø–∏–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –∑–∞–¥–∞—á –∏ –Ω–∞—á–Ω–∏—Ç–µ –æ–±—â–µ–Ω–∏–µ –≤ –Ω–∏—Ö!',
        { parse_mode: 'Markdown' }
      );
      
      // Update last check time
      if (chat) {
        chat.lastTopicsCheckAt = now;
        await chat.save();
      }
    }
    return;
  }
  
  // Check if message is in a topic
  if (!ctx.message?.message_thread_id) {
    await ctx.reply(
      'üí° **–°–æ–∑–¥–∞–π—Ç–µ —Ç–æ–ø–∏–∫ –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã**\n\n' +
      '–ö–∞–∂–¥—ã–π —Ç–æ–ø–∏–∫ ‚Äî —ç—Ç–æ –æ—Ç–¥–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç. –°–æ–∑–¥–∞–π—Ç–µ —Ç–æ–ø–∏–∫–∏ –¥–ª—è:\n' +
      '‚Ä¢ –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–≤\n' +
      '‚Ä¢ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∏ –∑–∞–¥–∞—á\n' +
      '‚Ä¢ –û–±—Å—É–∂–¥–µ–Ω–∏—è –∏–¥–µ–π\n' +
      '‚Ä¢ –ê–Ω–∞–ª–∏–∑–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤\n\n' +
      '–°–æ–∑–¥–∞–π—Ç–µ —Ç–æ–ø–∏–∫ –∏ –Ω–∞–ø–∏—à–∏—Ç–µ –≤ –Ω—ë–º!',
      { parse_mode: 'Markdown' }
    );
    return;
  }
  
  // Process message in topic
  await processTopicMessage(ctx, text);
}

async function processTopicMessage(ctx: BotContext, text: string) {
  const chatId = ctx.chat!.id;
  const topicId = ctx.message!.message_thread_id!;
  const userId = ctx.from!.id;
  const messageId = ctx.message!.message_id;
  
  try {
    // Find or create topic
    let topic = await Topic.findOne({ chatId, topicId });
    if (!topic) {
      topic = new Topic({
        chatId,
        topicId,
        title: `Topic ${topicId}`,
        messageCount: 0,
        isActive: true,
        settings: {
          maxContextWindow: 50,
          timezone: 'Europe/Berlin',
          autoSummary: {
            enabled: true,
            dailyAt: '03:30',
            weeklyAt: 'monday-03:30',
            monthlyAt: '1-03:30',
          },
        },
      });
      await topic.save();
    }
    
    // Save user message
    const userMessage = new Message({
      topicId: topic._id,
      chatId,
      telegramTopicId: topicId,
      messageId,
      userId,
      role: 'user',
      content: text,
    });
    await userMessage.save();
    
    // Update topic stats
    topic.lastMessageAt = new Date();
    topic.messageCount += 1;
    await topic.save();
    
    // Check for special commands or patterns
    if (await handleSpecialCommands(ctx, text, topic)) {
      return;
    }
    
    // Get AI response using LLM router
    try {
      // Get recent messages for context
      const recentMessages = await Message.find({
        topicId: topic._id
      })
      .sort({ createdAt: -1 })
      .limit(10)
      .lean();
      
      // Prepare messages for LLM
      const llmMessages = recentMessages.reverse().map(msg => ({
        role: msg.role as 'user' | 'assistant' | 'system',
        content: msg.content,
      }));
      
      // Add system message
      llmMessages.unshift({
        role: 'system',
        content: `–¢—ã AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –≤ —Ç–æ–ø–∏–∫–µ "${topic.title}". –û—Ç–≤–µ—á–∞–π –ø–æ–ª–µ–∑–Ω–æ –∏ –ø–æ –¥–µ–ª—É –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.`,
      });
      
      // Get AI response
      const aiResponse = await llmRouter.chat(llmMessages);
      
      // Send AI response
      const sentMessage = await ctx.reply(aiResponse.content, { parse_mode: 'Markdown' });
      
      // Save assistant response
      const assistantMessage = new Message({
        topicId: topic._id,
        chatId,
        telegramTopicId: topicId,
        messageId: sentMessage.message_id,
        userId: ctx.me.id,
        role: 'assistant',
        content: aiResponse.content,
        metadata: {
          model: aiResponse.model,
          provider: aiResponse.provider,
          usage: aiResponse.usage,
          processingTime: aiResponse.processingTime,
        },
      });
      await assistantMessage.save();
      
    } catch (error) {
      logger.error('Error getting AI response:', error);
      
      // Fallback response
      await ctx.reply(
        '‚ùå –ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è. ' +
        '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.',
        { parse_mode: 'Markdown' }
      );
    }
    
  } catch (error) {
    logger.error('Error processing topic message:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è');
  }
}

async function handleSpecialCommands(ctx: BotContext, text: string, _topic: any): Promise<boolean> {
  const lowerText = text.toLowerCase();
  
  // Check for reminder patterns
  if (lowerText.includes('–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ') || lowerText.includes('–Ω–∞–ø–æ–º–Ω–∏')) {
    await ctx.reply(
      '‚è∞ **–°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è**\n\n' +
      '–û–±–Ω–∞—Ä—É–∂–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è!\n' +
      '–í –ø–æ–ª–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç:\n' +
      '‚Ä¢ –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏\n' +
      '‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ –ë–î\n' +
      '‚Ä¢ –ü–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–¥–∞—á–∏ –≤ –æ—á–µ—Ä–µ–¥—å\n\n' +
      '–ü—Ä–∏–º–µ—Ä: "–ü–æ—Å—Ç–∞–≤—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞–≤—Ç—Ä–∞ –≤ 10:00 –ø–æ–∑–≤–æ–Ω–∏—Ç—å –∫–ª–∏–µ–Ω—Ç—É"',
      { parse_mode: 'Markdown' }
    );
    return true;
  }
  
  // Check for summary patterns
  if (lowerText.includes('—Å–∞–º–º–∞—Ä–∏') || lowerText.includes('—Å–≤–æ–¥–∫–∞')) {
    await ctx.reply(
      'üìä **–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∞–º–º–∞—Ä–∏**\n\n' +
      '–û–±–Ω–∞—Ä—É–∂–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–∞–º–º–∞—Ä–∏!\n' +
      '–í –ø–æ–ª–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç:\n' +
      '‚Ä¢ –ê–Ω–∞–ª–∏–∑ —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ –ø–µ—Ä–∏–æ–¥\n' +
      '‚Ä¢ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫—Ä–∞—Ç–∫–æ–π —Å–≤–æ–¥–∫–∏\n' +
      '‚Ä¢ –í—ã–¥–µ–ª–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö –º–æ–º–µ–Ω—Ç–æ–≤\n\n' +
      '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /summary –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞',
      { parse_mode: 'Markdown' }
    );
    return true;
  }
  
  // Check for note patterns
  if (lowerText.includes('–∑–∞–º–µ—Ç–∫–∞') || lowerText.includes('–∑–∞–ø–∏—à–∏')) {
    await ctx.reply(
      'üìù **–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏**\n\n' +
      '–û–±–Ω–∞—Ä—É–∂–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏!\n' +
      '–í –ø–æ–ª–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç:\n' +
      '‚Ä¢ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∑–∞–º–µ—Ç–∫–∏\n' +
      '‚Ä¢ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å —Ç–µ–≥–∞–º–∏\n' +
      '‚Ä¢ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–∏—Å–∫–∞\n\n' +
      '–ü—Ä–∏–º–µ—Ä: "–ó–∞–ø–∏—à–∏ –∑–∞–º–µ—Ç–∫—É: –≤—Å—Ç—Ä–µ—á–∞ —Å –∫–ª–∏–µ–Ω—Ç–æ–º 15 —á–∏—Å–ª–∞"',
      { parse_mode: 'Markdown' }
    );
    return true;
  }
  
  return false;
}